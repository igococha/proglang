PARSER_BEGIN(LexTest)

public class LexTest {
  public static void main(String args[]) throws ParseException {
    System.out.println ("Type in tokens separated by white space (including newlines)");
    System.out.println ("Type EOF to finish...(Ctrl-D on Unix, Ctrl-Z on PC)");
    LexTest parser = new LexTest(System.in);
    parser.TokenList();
  }


}



PARSER_END(LexTest)

/* 
 * Lexical items. 
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"		/* Tab */
| "\n"		/* Newline */
| "\r"		/* Return */
| "\f"		/* Formfeed */
}

TOKEN : { < KEYWHILE: "while" > }

TOKEN : /* Literal integers. */
{
  < INTEGER_LITERAL: (<SIGN>)* (<DIGIT>)+ (<LONG>)* >
}


TOKEN : /* Literal booleans. */
{ 
  < KEYTRUE: "true" > 
 |
  < KEYFALSE: "false" >
}

TOKEN : /* Binary .*/
{
  < BI: (<B>) (<BINARY>)+ (<LONG>)*>
|
  < OCT: (<SIGN>)* (<OCTAL>)+ (<LONG>)*>
}

TOKEN : /* Hexadecimal .*/
{
  < HEXA: (<SIGN>)* (<CHAR>) (<HEX>)+ (<LONG>)*>
}


TOKEN : /* Floating Point . */
{
  < FP: (<SIGN>)? (<EXPONENT>)+ (<SUFFIX>)? >
}

TOKEN : /* Error . */
{
   < Err: (<DIGIT>)* (<ERROR>)* >
}

TOKEN : /* COMMENT */ 
{
   < Com: "//" (<LETTER>)* (<DIGIT>)+>
}




TOKEN : /* Definitions for use in other lexical definitions 
           (signified by the `#'). */
{

  < #LETTER: [ "a"-"z", "A"-"Z" ] >
|
  < #DIGIT: [ "0"-"9"] >
|
  < #BINARY: [ "0" - "1" ] >
|
  < #B: [ "b" - "b", "B" - "B" ] >
|
  < #LONG: [ "L" ] >
|
  < #SIGN: [ "-", "+" ] >
|
  < #CHAR: [ "z" - "z", "Z" - "Z"] >
|
  < #HEX: [ "a" - "f", "A" - "F", "0"- "9" ] >
|
  < #OCTAL: [ "o" - "o", "O" - "O", "0" - "7" ] >
|
  < #EXPONENT: [ "e" - "e", "E" - "E", "0" - "9", "." ,"-"] >
|
  < #SUFFIX: [ "d" - "d", "f" - "f" ] >
|
  < #ERROR: [ "a"-"z", "A"-"Z", "0"-"9"] >
}

/*
 * A simple grammar to match tokens and print them.
 */

void TokenList() :
{Token t;}
{
   (
     (t = <KEYWHILE> | t = <INTEGER_LITERAL> | t = <KEYTRUE> | t = <KEYFALSE> | 
           t = <BI> | t = <HEXA> | t = <OCT> | t = <FP> | t = <Err>  | t = <Com> )
           { System.out.println ("token found: "+ tokenImage[t.kind]+
                                    " (`"+t.image+"')"); }
   )* <EOF>
}

