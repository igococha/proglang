PARSER_BEGIN(Literal)

public class Literal {
  public static void main(String args[]) throws ParseException {
    System.out.println ("Type in tokens separated by white space (including newlines)");
    System.out.println ("Type EOF to finish...(Ctrl-D on Unix, Ctrl-Z on PC)");
    Literal parser = new Literal(System.in);
    parser.TokenList();
  }
	public static String inputCheck(String input) {
	//remove "L" if it is present at the end of an integer literal
        if (input.endsWith("L")){
                input = input.substring(0, input.length()-1);
        }

	//check if a prefix is present
        if (input.charAt(0) == '-') {
                return "-" + interpret(input.substring(1));
                }
        else if (input.charAt(0) == '+') {
                return "+" + interpret(input.substring(1));
                }
	else {
		return interpret(input);
		}
	}

	public static String interpret(String s) {
	try{
        if (s.charAt(0) == 'b' || s.charAt(0) == 'B') {
                String binary = s.substring(1);
		return String.valueOf(Long.parseLong(binary, 2));
                }

        else if (s.charAt(0) == 'z' || s.charAt(0) == 'Z'){
                String hex = s.substring(1, s.length()-1);
		return String.valueOf(Long.parseLong(hex, 16));
                }

        else if (s.charAt(0) == 'o' || s.charAt(0) == 'O'){
                String octal = s.substring(1);
		return String.valueOf(Long.parseLong(octal, 8));
                }

        else {
                //s is a decimal
		return String.valueOf(Long.parseLong(s));
                }

        } catch (NumberFormatException e) {
		return s;
		}	
	}
}

PARSER_END(Literal)

/* 
 * Lexical items. 
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"		/* Tab */
| "\n"		/* Newline */
| "\r"		/* Return */
| "\f"		/* Formfeed */
}

/* LITERAL */
TOKEN : {
  < INTEGER_LITERAL:
        (<SIGN>)? <DECIMAL_LITERAL> ("L")?
      | (<SIGN>)? <HEXADECIMAL_LITERAL> ("L")?
      | (<SIGN>)? <OCTAL_LITERAL> ("L")?
      | (<SIGN>)? <BINARY_LITERAL> ("L")?
  >
|
  < #SIGN: ("+" | "-") >
|
/* Binary Number. */
  < #BINARY_LITERAL: ["b", "B"](["0", "1"])+ >
|
/* Decimal. */
  < #DECIMAL_LITERAL: ("0" | (["1"-"9"] (["0"-"9"])*)) >
|
/* Hexadecimal. */
  < #HEXADECIMAL_LITERAL: ["Z","z"] (["0"-"9","a"-"f","A"-"F"])+ >
|
/* Octal numeral. */
  < #OCTAL_LITERAL: ["o","O"] (["0"-"7"])+ >
|
  < FLOATING_POINT_LITERAL:
        (<SIGN>)? <DIGIT> "." (<DIGIT>)? (<EXPONENT>)? (<TYPESUFFIX>)?
      | (<SIGN>)? "." <DIGIT> (<EXPONENT>)? (<TYPESUFFIX>)?
      | (<SIGN>)? <DIGIT> <EXPONENT> (<TYPESUFFIX>)?
      | (<SIGN>)? <DIGIT> (<EXPONENT>)? <TYPESUFFIX> 
  >
|
/* Digit. */
  < #DIGIT: (["0"-"9"])+ >
|
/* TypeSufix */
  < #TYPESUFFIX: (["d","f"]) >
|
/* Exponent */
  < #EXPONENT: (["e","E"]) (["+","-"])? (["0"-"9"])+ >
| 
  < COMMENT: 
   	"/*" (~["\n","\r"])* "*/"
      | "//" (~["\n","\r"])* 
  >
|
< ERROR: (~[" ", "\n", "\r"])+ >
}

/*
 * A simple grammar to match tokens and print them.
 */

void TokenList() :
{Token t;}
{
   (
     (t = <FLOATING_POINT_LITERAL> | t = <INTEGER_LITERAL> | t = <COMMENT> | t = <ERROR> )
           { 
		System.out.println ("token found: "+ tokenImage[t.kind]+ " (`"+ inputCheck(t.image) +"')");
		}
   )* <EOF>
}
