#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass report
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry true
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Subsection*
IN2009: Language Processors
\end_layout

\begin_layout Subsection*
2006/2007 Coursework 1
\end_layout

\begin_layout Paragraph
Organisation:
\end_layout

\begin_layout Standard
This coursework assessment may be completed individually, or in pairs, and
 there is no penalty for working in a pair.
 You will hand work in as individuals but the handin procedure will allow
 you to say who you collaborated with (and you must do so!).
 
\emph on
Pairs
\emph default
 only -- not threesomes!
\end_layout

\begin_layout Paragraph
Hand in:
\end_layout

\begin_layout Standard
The deadline and the electronic handin procedure, and exactly what you should
 hand-in, are documented online.
 Obviously you should change file and directory permissions while you are
 working so that your work is not visible to others -- remember plagiarism
 carries severe penalties.
\end_layout

\begin_layout Standard
Use JavaCC regular expressions to define precisely integer literals and
 floating point literals as described below.
 In this context, 'literal' means the piece of text that appears in a program
 to denote a number (for example, the text '
\family typewriter
3.142
\family default
' denotes the number 
\begin_inset Formula $3.142$
\end_inset

.
 
\end_layout

\begin_layout Subsection*
Task 1 - Regular Expressions
\end_layout

\begin_layout Paragraph
Integer Literals
\end_layout

\begin_layout Standard
An integer literal may be expressed as decimal, hexadecimal, or octal numerals.
 Each may be suffixed with an '
\family typewriter
L
\family default
' to denote an integer of type 
\family typewriter
long
\family default
.
 A decimal numeral is either the single character 
\family typewriter
0
\family default
, or consists of a digit from 
\family typewriter
1
\family default
 to 
\family typewriter
9
\family default
, optionally followed by one or more digits from 
\family typewriter
0
\family default
 to 
\family typewriter
9
\family default
.
 A hexadecimal numeral consists of leading characters 
\family typewriter
0X
\family default
 or 
\family typewriter
0x
\family default
 followed by one or more hexadecimal digits.
 A hexadecimal digit is a digit from 
\family typewriter
0
\family default
 to 
\family typewriter
9
\family default
 or a letter from 
\family typewriter
a
\family default
 through 
\family typewriter
f
\family default
 or 
\family typewriter
A
\family default
 through 
\family typewriter
F
\family default
.
 An octal numeral consists of a digit 
\family typewriter
0
\family default
 followed by one or more of the digits 
\family typewriter
0
\family default
 to 7.
 Examples of integer literals: 
\family typewriter
0 1996 0372 0xDadaCafe 0L 0777L 0xC0B0L 0x00FF00FF
\end_layout

\begin_layout Paragraph
Floating point literals
\end_layout

\begin_layout Standard
A floating point literal has the following parts: a whole-number part, a
 decimal point (represented by a period character), a fractional part, an
 exponent, and a type suffix.
 A type suffix is either the letter 
\family typewriter
d
\family default
 (denoting 
\family typewriter
double
\family default
 type) or 
\family typewriter
f
\family default
 (denoting 
\family typewriter
float
\family default
 type).
 The exponent, if present, is indicated by the letter 
\family typewriter
e
\family default
 followed by an optionally signed number.
 At least one digit, in either the whole number or the fraction part, and
 either a decimal point, an exponent, or a float type suffix are required.
 All other parts are optional.
 Subject to the above constraints, the whole-number part, the fractional-part
 and the number in the exponent are sequences of digits from 
\family typewriter
0
\family default
 to 
\family typewriter
9
\family default
.
 Examples: 
\family typewriter
1e1f 2.f .3f 0f 3.14f 6.022137e23f 1e1 2.
 0.3 0.0 3.14 1e-9d 1e137 
\end_layout

\begin_layout Standard
Implement and test your expressions using JavaCC (make your expressions
 readable and understandable).
\end_layout

\begin_layout Subsection*
Task 2 - MiniJava modification
\end_layout

\begin_layout Standard
Copy the MiniJava implementation directory to where you want to work, using:
\end_layout

\begin_layout Standard

\family typewriter
cp -R /soi/sw/courses/daveb/IN2009/minijava/chap4
\family default
 (or download it from Cityspace)
\end_layout

\begin_layout Standard
Files 
\family typewriter
README
\family default
 in the various directories give a brief description of the structure of
 the implementation.
 The MiniJava BNF and reference manual have been handed out and are online.
\end_layout

\begin_layout Enumerate
Add a Java-like 
\family typewriter
for
\family default
-statement to the MiniJava implementation
\begin_inset Formula \[
<Statement>\;->\;<for>\;(<Exp>;<Exp>;<Exp>)\,\{<Statement>\}\]

\end_inset


\end_layout

\begin_layout Enumerate
In a similar way, add the Java-like try and throw statements defined below
 to the implementation: 
\begin_inset Formula \[
<Statement>\;->\;<try>\;\{\;<Statement>^{*}\;\}\;<Catch>^{*}<finally>\;\{\;<Statement>^{*}\;\}\]

\end_inset

 
\begin_inset Formula \[
<Statement>\:->\:<throw>\;<Exp>\;;\]

\end_inset

 
\begin_inset Formula \[
<Catch>\;->\;<catch>\;(\;<Type>\;<id>\;)\{\;<Statement>^{*}\;\}\]

\end_inset

 Note that the 
\begin_inset Formula $<Catch>$
\end_inset

s sequence may be represented as a list in your abstract syntax (and hence
 programmed like the other lists).
\end_layout

\begin_layout Standard
You will need to add the new statements to the JavaCC specification (including
 appropriately adjusting the token regular expressions), so that it builds
 the correct abstract syntax trees, and write new appropriate abstract syntax
 tree classes.
 The pretty-printer will also need to be updated to appropriately print
 the new abstract syntaxes you have introduced.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
em
\end_layout

\end_inset

 Note: remember that these exercises deal only with lexical and syntax analysis
 and producing appropriate abstract syntax trees: you do not yet have to
 worry about how MiniJava programs are type-checked, execute or have code
 produced for them!
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
