PARSER_BEGIN(Literal)

public class Literal {
  public static void main(String args[]) throws ParseException {
    System.out.println ("Type in tokens separated by white space (including newlines)");
    System.out.println ("Type EOF to finish...(Ctrl-D on Unix, Ctrl-Z on PC)");
    Literal parser = new Literal(System.in);
    parser.TokenList();
  }
}

PARSER_END(Literal)

/* 
 * Lexical items. 
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"		/* Tab */
| "\n"		/* Newline */
| "\r"		/* Return */
| "\f"		/* Formfeed */
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        (<SIGN>)?
        (<DECIMAL_LITERAL> ("L")?
      | <HEX_LITERAL> ("L")?
      | <OCTAL_LITERAL> ("L")?
      | <BINARY_LITERAL> ("L")?)
  >
|
  < #SIGN: ("+" | "-") >
|
  < #DECIMAL_LITERAL: ("0" | (["1"-"9"] (["0"-"9"])*)) >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])+ >
|
  < #BINARY_LITERAL: "0" ["b", "B"](["0", "1"])+ >
|
  < FLOATING_POINT_LITERAL:
        <DIGITS> "." (<DIGITS>)? (<EXPONENT>)? (<TYPESUFFIX>)?
      | "." <DIGITS> (<EXPONENT>)? (<TYPESUFFIX>)?
      | <DIGITS> <EXPONENT> (<TYPESUFFIX>)?
      | <DIGITS> (<EXPONENT>)? <TYPESUFFIX>
  >
|
  < #DIGITS: (["0"-"9"])+ >
|
  < #TYPESUFFIX: (["f","d"]) >
|
  < #EXPONENT: "e" (["+","-"])? (["0"-"9"])+ >
}


/*
 * A simple grammar to match tokens and print them.
 */

void TokenList() :
{Token t;}
{
   (
     (t = <FLOATING_POINT_LITERAL> | t = <INTEGER_LITERAL>)
           { System.out.println ("token found: "+ tokenImage[t.kind]+
                                    " (`"+t.image+"')"); }
   )* <EOF>
}

