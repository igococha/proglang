::::::::::::::ARRAYINT.java::::::::::::::package types;public class ARRAYINT extends MJType{    private int value ;    public ARRAYINT(int v){ value = v ; }    public ARRAYINT(){ }    public String GetType(){	return "array-int" ;    }}::::::::::::::BOOLEAN.java::::::::::::::package types ;public class BOOLEAN extends MJType{    private boolean value ;    public BOOLEAN(boolean v ) { value = v ; }    public BOOLEAN( ) { }    public String GetType(){	return "boolean" ;    }}::::::::::::::INT.java::::::::::::::package types;public class INT extends MJType{    private int value ;    public INT(int v){ value = v ; }    public INT( ) { }    public String GetType(){	return "int" ;    }}::::::::::::::MJClasses.java::::::::::::::package types ;import java.util.Vector ;public class MJClasses extends MJType{    private Vector mj_classes = new Vector() ;    public String InsertClass(MJObj v_class){	String class_name = v_class.GetClassName();	if (Repeated(class_name))	    return "Class double declaration " + class_name ;	mj_classes.addElement(v_class);	return null ;    }    public void Print(){	int sz = mj_classes.size() ;	for(int i = 0 ; i < sz ; i++){	    MJObj cl = (MJObj)mj_classes.elementAt(i) ;	    cl.Print();	    //String class_name = cl.GetClassName();	    //String exten_name = cl.GetExtenName();	    //System.out.println("Class: " + class_name + " Extends: " + exten_name);	}    }    public String GetType(){	return "" ;    }	       public boolean Repeated(String class_name){	int sz = mj_classes.size() ;	for(int i = 0 ; i < sz ; i++){	    String c_name = ((MJObj)mj_classes.elementAt(i)).GetClassName() ;	    if (c_name.equals(class_name)) return true ;	}	return false ;    }    public String SetExtensions(){	boolean has_error = false ;	String error_msg = "";	int sz = mj_classes.size() ;	for(int i = 0 ; i < sz ; i++){	    MJObj mj_class = (MJObj)mj_classes.elementAt(i) ;	    String c_name =  mj_class.GetClassName();	    String class_ext_name = mj_class.GetExtenName();	    if  (class_ext_name != null) {		if (c_name.equals(class_ext_name)) {		    error_msg = error_msg + "\n       Class self extension in class " + c_name ;		    has_error = true ;		}		else {		    MJObj ext_class = GetClass(class_ext_name) ;		    if (ext_class == null){			error_msg = error_msg + "\n       Extend class does not exist " + class_ext_name ;			has_error = true ;		    }		}	    }			}	if (has_error) return  error_msg;	else return null ;    }    public MJObj GetClass(String class_name){	int sz = mj_classes.size() ;	for(int i = 0 ; i < sz ; i++){	    MJObj mj_c = (MJObj)mj_classes.elementAt(i) ;	    String c_name = mj_c.GetClassName() ;	    if (c_name.equals(class_name)) return mj_c ;	}	return null ;    }}::::::::::::::MJMethod.java::::::::::::::package types ;import java.util.Vector ;public class MJMethod extends MJType {    private Vector parameters = new Vector();    private String name ;    private MJType ret_type ;    public MJMethod(String v_name, MJType r_type){	name = v_name ;	ret_type = r_type ;    }    public String InsertParam(String p_name, MJType p_type){	boolean error = Repeated(p_name) ;	if (error)	    return "Parameter double declaration " + p_name + " in method " + name ;	Variable v = new Variable(p_name,p_type);	parameters.addElement(v);	return null ;    }    public void Print(){	int sz = parameters.size() ;	String type_name = ret_type.GetType();	System.out.println("             " + name + "   Return Type: " + type_name);	System.out.println("         Parameters:");	for(int i = 0 ; i < sz ; i++){	    Variable param = (Variable)parameters.elementAt(i) ;	    param.Print();	}	System.out.println(" ");    }    public String GetType(){	return "" ;    }    public String GetName(){	return name ;    }    public boolean Repeated(String p_name){	int sz = parameters.size() ;	for(int i = 0 ; i < sz ; i++){	    String param = ((Variable)parameters.elementAt(i)).GetName() ;	    if (p_name.equals(param)) return true ;	}	return false ;    }}::::::::::::::MJObj.java::::::::::::::package types ;import java.util.Vector ;public class MJObj extends MJType{    private String name ;    private Vector fields = new Vector();    private Vector methods = new Vector();    private MJObj  class_extends ;    private String extend_name;    public MJObj(String v_name, MJObj ext){	name = v_name ;	class_extends = ext ;	extend_name = null ;    }    public MJObj(String v_name){	name = v_name ;	extend_name = null ;    }    public MJObj(String v_name, String ext_name){	name = v_name ;	extend_name = ext_name ;    }    public String GetClassName(){	return name;    }    public String GetExtenName(){	return extend_name ;    }    public void SetExtension(MJObj ext){	class_extends = ext ;    }	    public String InsertField(String f_name, MJType f_type){	boolean error = Repeated_Field(f_name) ;	if (error)	    return "Class variable double declaration " + f_name + " in class " + name ;	Variable v = new Variable(f_name,f_type);	fields.addElement(v);	return null ;    }    public String InsertMethod(MJMethod mtd){	String m_name = mtd.GetName() ;	boolean error = Repeated_Method(m_name) ;	if (error)	    return "Class method double declaration " + m_name + " in class " + name ;	methods.addElement(mtd);	return null ;    }    public void Print(){	int fsz = fields.size() ;	int msz = methods.size();	System.out.println("Class: " + name + " Extends: " + extend_name);	System.out.println("    Class Variables:");	for(int i = 0 ; i < fsz ; i++){	    Variable var = (Variable)fields.elementAt(i) ;	    var.Print();	}	System.out.println("\n    Methods:");	for(int i = 0 ; i < msz ; i++){	    MJMethod meth = (MJMethod)methods.elementAt(i) ;	    meth.Print();	}	System.out.println(" ");    }    public String GetType(){	return ("Object" + name) ;    }    public boolean Repeated_Field(String field_name){	int sz = fields.size() ;	for(int i = 0 ; i < sz ; i++){	    String fn_name = ((Variable)fields.elementAt(i)).GetName() ;	    if (fn_name.equals(field_name)) return true ;	}	return false ;    }    public boolean Repeated_Method(String method_name){	int sz = methods.size() ;	for(int i = 0 ; i < sz ; i++){	    String m_name = ((MJMethod)methods.elementAt(i)).GetName() ;	    if (m_name.equals(method_name)) return true ;	}	return false ;    }}::::::::::::::MJType.java::::::::::::::package types ;public abstract class MJType {    public abstract String GetType();}::::::::::::::Name.java::::::::::::::package types ;public class Name extends MJType{    private String name ;    public Name(String v_name){	name = v_name ;    }    public String GetName(){	return name ;    }    public String GetType(){	return ("Object " + name);    }}::::::::::::::Variable.java::::::::::::::package types ;import java.util.Vector ;public class Variable {    private String name ;    private MJType var_type ;    public Variable(String v_name, MJType v_type){	name = v_name ;	var_type = v_type ;    }    public String GetName(){	return name ;    }    public void Print(){	String type_name = var_type.GetType();	System.out.println("             " + name + "   Type: " + type_name);    }            public String GetType(){	return ("OBject" + name) ;    }    }