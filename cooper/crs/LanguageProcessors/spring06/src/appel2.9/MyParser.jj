PARSER_BEGIN(MyParser)
   class MyParser {}
PARSER_END(MyParser)

/* For the regexps on the right, the token on the left will be returned: */

TOKEN : {
     < IF: "if" >
  |  < #DIGIT: ["0"-"9"] >
  |  < ID: ["a"-"z"] (["a"-"z"]|<DIGIT>)* >
  |  < NUM: (<DIGIT>)+ >
  |  < REAL: ( (<DIGIT>)+"."(<DIGIT>)* ) | 
             ( (<DIGIT>)*"."(<DIGIT>)+ ) >
}

/* The regexps here will be skipped during lexical analysis: */

SKIP : {
     < "--" (["a"-"z"])* ("\n" | "\r" | "\r\n") >
  |  " " | "\t" | "\n" | "\r"
}

/* JavaCC throws an error if we have no substring to match the TOKEN
   or SKIP expressions. */

/* This is a little piece of grammar to drive our example. 
   It repeatedly  matches and prints any one of the defined tokens: */

void Start() :
{Token t;}
{ ( ( t=<IF> | t=<ID> | t=<NUM> | t=<REAL> )
           { System.out.println ("token found: "+ tokenImage[t.kind]+
                                    " (`"+t.image+"')"); }
  )* <EOF>
}

