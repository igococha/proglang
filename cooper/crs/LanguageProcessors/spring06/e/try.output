

Terminals which are not used:

   if
   then
   else
   '+'


Conflict in state 6 between rule 1 and token '-' resolved as reduce.
Conflict in state 6 between rule 1 and token '&' resolved as shift.
Conflict in state 6 between rule 1 and token '|' resolved as shift.
Conflict in state 7 between rule 3 and token '-' resolved as reduce.
Conflict in state 7 between rule 3 and token '&' resolved as reduce.
Conflict in state 7 between rule 3 and token '|' resolved as shift.
Conflict in state 8 between rule 4 and token '-' resolved as reduce.
Conflict in state 8 between rule 4 and token '&' resolved as reduce.
Conflict in state 8 between rule 4 and token '|' resolved as reduce.

Grammar
rule 1    E -> E '-' E
rule 2    E -> 'a'
rule 3    E -> E '&' E
rule 4    E -> E '|' E

Terminals, with rules where they appear

$ (-1)
'&' (38) 3
'+' (43)
'-' (45) 1
'a' (97) 2
'|' (124) 4
error (256)
if (257)
then (258)
else (259)

Nonterminals, with rules where they appear

E (11)
    on left: 1 2 3 4, on right: 1 3 4


state 0

    'a' 	shift, and go to state 1

    E   	go to state 2



state 1

    E  ->  'a' .   (rule 2)

    $default	reduce using rule 2 (E)



state 2

    E  ->  E . '-' E   (rule 1)
    E  ->  E . '&' E   (rule 3)
    E  ->  E . '|' E   (rule 4)

    $   	go to state 9
    '-' 	shift, and go to state 3
    '&' 	shift, and go to state 4
    '|' 	shift, and go to state 5



state 3

    E  ->  E '-' . E   (rule 1)

    'a' 	shift, and go to state 1

    E   	go to state 6



state 4

    E  ->  E '&' . E   (rule 3)

    'a' 	shift, and go to state 1

    E   	go to state 7



state 5

    E  ->  E '|' . E   (rule 4)

    'a' 	shift, and go to state 1

    E   	go to state 8



state 6

    E  ->  E . '-' E   (rule 1)
    E  ->  E '-' E .   (rule 1)
    E  ->  E . '&' E   (rule 3)
    E  ->  E . '|' E   (rule 4)

    '&' 	shift, and go to state 4
    '|' 	shift, and go to state 5

    $default	reduce using rule 1 (E)



state 7

    E  ->  E . '-' E   (rule 1)
    E  ->  E . '&' E   (rule 3)
    E  ->  E '&' E .   (rule 3)
    E  ->  E . '|' E   (rule 4)

    '|' 	shift, and go to state 5

    $default	reduce using rule 3 (E)



state 8

    E  ->  E . '-' E   (rule 1)
    E  ->  E . '&' E   (rule 3)
    E  ->  E . '|' E   (rule 4)
    E  ->  E '|' E .   (rule 4)


    $default	reduce using rule 4 (E)



state 9

    $   	go to state 10



state 10

    $default	accept
