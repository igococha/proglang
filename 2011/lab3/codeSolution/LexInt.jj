
PARSER_BEGIN(LexInt)
/* Java declarations to be inserted by JavaCC */

/* Class declaration for LexInt used instead of default */
public class LexInt {
  public static void main(String args[]) throws ParseException {
    System.out.println ("Type in tokens separated by white space (including newlines)");
    System.out.println ("Type EOF to finish...(Ctrl-D on Unix, Ctrl-Z on PC)");
    LexInt parser = new LexInt(System.in);
    parser.TokenList(); /* TokenList declared below */
  }
}

PARSER_END(LexInt)

/* 
 * Lexical items. 
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"		/* Tab */
| "\n"		/* Newline */
| "\r"		/* Return */
| "\f"		/* Formfeed */
}


TOKEN : /* Reserved words and Keywords */
{
  < IF: "if" >
}

TOKEN : /* Literal integers. */
{
  < INTEGER_LITERAL: ("+"|"-")? ("0" | ["1"-"9"] (<DIGIT>)*)  >
|
  < BINARY_LITERAL: ("b" | "B")  (["0"-"1"])+  >
}

TOKEN : /* Identifiers. */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"_")* >
}



TOKEN : /* Definitions for use in other lexical definitions 
           (signified by the `#'). */
{
  < #LETTER: [ "a"-"z", "A"-"Z" ] >
|
  < #DIGIT: [ "0"-"9"] >

}

TOKEN :
{
 < COMMENT: "//" (~["\n","\r"])* ["\n","\r"] >
}
/*
 * A simple grammar to match tokens and print them.
 */

void TokenList() :
{Token t; String s;}
{
   (
     (t = <INTEGER_LITERAL> | t = <IDENTIFIER> | t=<IF> | 
      t = <BINARY_LITERAL> | t = <COMMENT> )
           { System.out.print("token found: "+ tokenImage[t.kind]);
             System.out.print(" (`"+t.image+"') value: "); 
	     switch (t.kind) {
	     case INTEGER_LITERAL:
	        System.out.println(Integer.parseInt(t.image)); break;
	     case BINARY_LITERAL:
	        s = t.image.substring(1);
	        System.out.println(Integer.parseInt(s,2)); break;
	     default: System.out.println("UNDEFINED");
	     }
           }
   )* <EOF>
}

