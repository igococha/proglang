\documentclass{article}

\usepackage{a4wide}
\usepackage[breaklinks=true,
        colorlinks=true,urlcolor=blue,pdfpagemode=None]{hyperref}

\newcommand{\fname}[1]{\texttt{#1}}

\begin{document}
\thispagestyle{empty}

\newcommand{\negra}[1]{\textbf{#1}}

\section*{Language Processors Lab 5 - Building an Abstract Syntax Trees (ASTs)}

\medskip\noindent In this lab you will learn how to use JAvaCC semantic actions to build Abstract Syntax Trees. You will be given a JavaCC file that implements an arithmetical expression calculator using JavaCC semantic actions (previos week's lb), and a set of Java classes that implement ASTs for artihmetical expressions. You will be asked to modify the JavaCC file to inlcude the correct constructor calls (that build the AST) and modify the AST classes in order to implement a new calculator. You will then be asked to add a new arithmetical operator.

\subsection*{Downloading the files}

Start a Unix shell window and move to your LanguageProcessors directory. Download the file {\tt lab5.tar.gz} from Moodle (week5) or from \verb+http://www.soi.city.ac.uk/~sbbc287/lab5.tar.gz+. Unzip and untar the file with the following commands:

\begin{verbatim}
gunzip lab5.tar.gz       // this will genenerate lab5.tar
tar -xvf lab5.tar
\end{verbatim}

The last command will generate the {\tt lab5} directory. It is possible that, while downloading, the file system automatically unzips, and even expands (untars), the file. If that's the case, you may have to skip one or both of the above commands, though make sure to copy the new directory. \\
Load java and javacc by executing the command 
{\textbf {\tt module add java javacc}}.


\subsection*{The Program}

The contents of the {\tt lab5} directory are:
\begin{itemize}
\item {\tt Exp.jj}: Defines the grammar for expressions and contains Java code that builds the abstract syntax tree (AST) of expressions.
\item {\tt Main.java}: Entry point of the program. It calls the parser, stores the AST (of class Exp), instantiates a calculator visitor which is then called to evaluate the AST.
\item The {\tt syntaxtree} directory: It contains the classes that implement the abstract syntax tree for expressions. The file {\tt Exp.java} defines the abstract class {\tt Exp}. All expressions - nodes of the AST - are subclasses of {\tt Exp}: {\tt PlusExp}, {\tt MinusEx}, {\tt TimesExp}, {\tt DivideExp} and {\tt NumExp}.
\item The {\tt visitor} directory:
\begin{itemize}
\item {\tt Visitor.java}: Defines the {\tt Visitor} interface.
\item {\tt Calc.java}: Implements the {\tt Visitor} interface. Traverses an expression's AST and calculates ``its value''.
\item {\tt AstPrint.java}: Implements the {\tt Visitor} interface. Traverses an expression's  AST and prints its contents.
\end{itemize}
\end{itemize}


Execute JavaCC, compile the generated java files and execute the program by typing the usual commands:

\begin{verbatim}
    javacc Exp.jj            javac *.java            java Main
\end{verbatim}

\noindent Test the program with a few examples. What happens? Why? The rest of this section provides a brief explanation of the code.
Start the text editor and load {\tt Main.java}. Inspect its contents: 

\begin{verbatim}
1     Exp root;
2     ExpParser parser = new ExpParser(System.in);
3     try {
4       System.out.println("Type in an expression on a single line.");
5       root = parser.S();                          
6       Calc calculator = new Calc();
7       int value = root.accept(calculator);        
8       System.out.println("Answer is "+value);
9       /* Add new code after this line */
10    } catch (ParseException e) {
11      System.out.println("Expression parser - error in parse");
12    }
\end{verbatim}

Line (2) instantiates the parser and stores it in variable {\tt parser}. Recall that the entry point of the grammar is {\tt S()} (check this). Line (5) calls the parser and the result, an object of class {\tt Exp} and root of the AST, is stored in {\tt root}. Line (6) instantiates visitor {\tt Calc} and stores it in variable {\tt calculator}, which is then used in line (7) to visit the AST {\tt root}. The result is stored in variable {\tt value} and printed in the next line. All this code is enclosed by a try clause given that line (5) can throw a {\tt ParseException} object. 


\subsubsection*{Grammar and AST generation: {\tt Exp.jj}}

The JavaCC file {\tt Exp.jj} implements the following grammar:

\begin{tabular}{lcl}
E & $\rightarrow$ & T ( \verb-+- T $|$ \verb+-+ T)$^*$ \\
T & $\rightarrow$ & F ( \verb+*+ F $|$ \verb+/+ F)$^*$ \\
F & $\rightarrow$ & number $|$ \verb+(+ E \verb+)+\\
\end{tabular}

The main difference between this JavaCC file and last week's file is that, instead of parsing expressions and computing their values, the Java code inserted in the grammar builds an AST. First of all, the return value of all non-terminals now has type {\tt Exp}. Second, the previous Java actions (see lab4) have been replaced by calls to constructors.
For example, check the definition of E() in {\tt Exp.jj}:

\begin{verbatim}
Exp E() :
{ Exp e; Exp t; }
{
  e=T() (  "+" t=T() { e=new PlusExp(e,t); }
         | "-" t=T() { e=new MinusExp(e,t); } )*
    { return e; }
}
\end{verbatim}

Besides matching T() and the plus and minus operators, the code above gets the intermediate AST's (of type Exp) and  uses them to build a new AST by calling the respective constructors, {\tt PlusExp} or {\tt MinusExp}.

Thus, at the end of parsing (if succesful), method {\tt S()} returns an AST that represents the input. For an example, check line (5) in {\tt Main.java}, above.

\subsubsection*{The Calculator implemented as a Visitor}

The Visitor Pattern allows us to create new operations based on tree traversal \emph{without} changing the abstract syntax tree classes. That is, all new operations (defined as visitors) performed on ASTs are implemented by separate classes.
The implementation of a visitor takes three steps:

\begin{itemize}
\item Define the visitor's interface. In our case, we want to define a visitor that visits all nodes of the AST and,a fter each visit, returns an integer. Therefore, we define a Java {\tt interface} that declares a {\tt visit} method for each class that is part of the {\tt Exp} AST. The {\tt visit method} returns {\tt int}.

\begin{verbatim}
   public interface Visitor {
     public int visit(PlusExp n);
     public int visit(MinusExp n);
     public int visit(TimesExp n);
     public int visit(DivideExp n);
     public int visit(NumExp n);
   }
\end{verbatim}

This interface can be found in {\tt Visitor.java}.

\item In order to be able to traverse the AST, each AST class has to accept the visitor. In our case, each AST class has to accept an object that implements the interface {\tt Visitor}. We do this by adding the method {\tt accept}, with argument of type {\tt Visitor}, to each AST class. For example, we add the following to {\tt PlusExp} (check the actual code in {\tt PlusExp.java}!):

\begin{verbatim}
public int accept(Visitor v) { return v.visit(this); }
\end{verbatim}

Note that the {\tt visit} method calls back the visitor {\tt v}, passing itself as argument. If you check back the definition of {\tt Visitor} above, there must be a {\tt visit} method per AST class. In a sense, the node is saying to the visitor ``you can visit me, but do it somewhere else''.

\item Next, we need to create the actual visitor. We do this by defining a new class e.g. {\tt Calc}, that implements the {\tt Visitor} interface:

\begin{verbatim}
  public class Calc implements Visitor { ... }
\end{verbatim}

and by providing an implemention to each of the {\tt visit} methods declared in {\tt Visitor}. In our case, we want to compute the value of the expression (like a calculator). For example, the value of a {\tt NumExp} must be number itself. Thus, the implementation of {\tt visit} for {\tt NumExp} must be:

\begin{verbatim}
  public int visit (NumExp n) { return Integer.parseInt(n.f0); }
\end{verbatim}

The value of a {\tt PlusExp} is the addition of the values of its left (e1) and right (e2) operators. We do this by calling {\tt accept} (traversing) on e1 and e2, and adding the returned values:

\begin{verbatim}
  public int visit (PlusExp n) { return n.e1.accept(this) + n.e2.accept(this); }
\end{verbatim}


\end{itemize}

Check the rest of {\tt Calc.java} and the Java files in directory {\tt syntaxtree}  for the complete implementation.



\subsection*{Adding the power operator}

We want to be able to write and evaluate expressions that contain the power operator \verb+^+. For example, we want to type \verb?2^5 + 10? and get back 42.
In order to do this, follow these steps:

\begin{itemize}
\item Modify the grammar. The power operator should have precedence to the plus and minus operator. For example, when we write \verb?2^5 + 10?, we mean \verb?(2^5) + 10? and not \verb?2^(5 + 10)?. Therefore, you need to add a line to the definition of T() in {\tt Exp.jj}:

\begin{verbatim}
Exp T() :
{ Exp t; Exp f; }
{
  t=F() (  "*" f=F() { t=new TimesExp(t,f); }
         | "/" f=F() { t=new DivideExp(t,f); } 
         | "^" f=F() { t=new PowerExp(t,f); } )*  // definition of power
    { return t; }
}
\end{verbatim}

Note that we are making a call to the constructor of the {\tt PowerExp} class, which does not exist yet. That's our next step.

\item Create a new file, {\tt PowerExp.java}, with the following contents:

\begin{verbatim}
package syntaxtree;

import visitor.*;

public class PowerExp extends Exp {
  public Exp e1, e2;
  public PowerExp(Exp a1, Exp a2) { e1=a1; e2=a2; }
  public int accept(Visitor v) { 
    return v.visit(this);
  }
}
\end{verbatim}

\item Add a declaration of the {\tt visit} method for the new {\tt PowerExp} class inside the {\tt Visitor} interface:

\begin{verbatim}
public interface Visitor {
...
  public int visit(PowerExp n);   // new line in Visitor.java

}
\end{verbatim}


\item And, finally, write the implementation of {\tt visit} for the new class. Insert the following method definition in {\tt Calc.java}:

\begin{verbatim}
  public int visit (PowerExp n) {
      return (int) java.lang.Math.pow(n.e1.accept(this),n.e2.accept(this));
  }
\end{verbatim}

Note that we are using the definition of power provided by the java.lang.Math library.

\end{itemize}

\noindent All the steps above must be done before the next compilation. \\
Execute javacc, compile the files and execute the program. Test it, for example, with \verb?2^5 + 10?. \\
Does it work? It should.

\subsection*{Printing the output}

The {\tt visitor} directory contains another file, {\tt AstPrint.java}. This file implements a visitor that traverses the AST and prints its contents. In order to use it, add the following lines to {\tt Main.java}:

\begin{verbatim}
     /* Add new code after this line */
      AstPrint printer =  new AstPrint();
      System.out.println("The expression is: ");
      root.accept(printer);
\end{verbatim}

Compile again. What happens?\\
You get a compilation error because the visitor {\tt AstPrint} has not implemented {\tt visit} for {\tt PowerExp}. Provide an implementation!

\end{document}

