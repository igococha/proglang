/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Exp.jj */
/*@egen*/options {
              
}


PARSER_BEGIN(ExpParser)

public class ExpParser/*@bgen(jjtree)*/implements ExpParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTExpParserState jjtree = new JJTExpParserState();

/*@egen*/
}

PARSER_END(ExpParser)

SKIP :
{
  " " | "\t" | "\r"
}

TOKEN :
{
  < NUM: (["0"-"9"])+ > | < EOL: "\n" >
}

void S()       :
{  }
{
     E() <EOL>
  | <EOL>
  | <EOF>
}

void E()       :
{  }
{
    T() (  "+"/*@bgen(jjtree) #PlusExp( 2) */
               {
                 ASTPlusExp jjtn001 = new ASTPlusExp(JJTPLUSEXP);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ T()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/            
         | "-"/*@bgen(jjtree) #MinusExp( 2) */
               {
                 ASTMinusExp jjtn002 = new ASTMinusExp(JJTMINUSEXP);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ T()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
               }
/*@egen*/             
        )*
}

void T()      :
{  }
{
   F() (  "*"/*@bgen(jjtree) #TimesExp( 2) */
               {
                 ASTTimesExp jjtn001 = new ASTTimesExp(JJTTIMESEXP);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/  F()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/              
         | "/"/*@bgen(jjtree) #DivExp( 2) */
               {
                 ASTDivExp jjtn002 = new ASTDivExp(JJTDIVEXP);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ F()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
               }
/*@egen*/            
       )*
}

void F()       :
{ Token t; }
{/*@bgen(jjtree) NumExp */
     {
       ASTNumExp jjtn001 = new ASTNumExp(JJTNUMEXP);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/
     (t=<NUM>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
               }
/*@egen*/  { jjtn001.val = Integer.parseInt(t.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/         
  | "(" E() ")"
}


