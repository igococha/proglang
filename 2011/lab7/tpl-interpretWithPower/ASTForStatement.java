/* Generated By:JJTree: Do not edit this line. ASTForStatement.java */

public class ASTForStatement extends SimpleNode {
  public ASTForStatement(int id) {
    super(id);
  }

  public ASTForStatement(TPLParser p, int id) {
    super(p, id);
  }

  /* To perform identification and type checking. */

  public void identification () {
    jjtGetChild(0).identification();
    jjtGetChild(1).identification();
    jjtGetChild(2).identification();
    jjtGetChild(3).identification();
  }

  public void typecheck () {
    jjtGetChild(0).typecheck();
    jjtGetChild(1).typecheck();
    jjtGetChild(2).typecheck();
    jjtGetChild(3).typecheck();

    if (jjtGetChild(1).GetNodeType() != TPLTypes.boolType)
       System.out.println("TPL Typechecker: for statement condition non-bool");

    NodeType = TPLTypes.stmType;
  }

  /* To perform interpreting. */

  public void interpret () {
      jjtGetChild(0).interpret();

      do {
          jjtGetChild(1).interpret();

          if ( ( (Boolean) stack.pop()).booleanValue()) {
              jjtGetChild(3).interpret();
              jjtGetChild(2).interpret();
          }
          else
              break;
      } while (true);
  }

   /*
  public void identification () {
      System.out.println("For statement has " + jjtGetNumChildren() + " children.");
      for (int i = 0; i < jjtGetNumChildren(); ++i) {
          System.out.println("Child no. " + i + ": " + jjtGetChild(i).GetNodeType());
      }
  }

  public void interpret () {
      System.out.println("Interpreting for statement.");
  }    */

}