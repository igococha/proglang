\documentclass{article}

\usepackage{a4wide}
\usepackage[breaklinks=true,
        colorlinks=true,urlcolor=blue,pdfpagemode=None]{hyperref}

\newcommand{\fname}[1]{\texttt{#1}}

\begin{document}
\thispagestyle{empty}

\newcommand{\negra}[1]{\textbf{#1}}

\section*{Language Processors Lab Week 1 (Revisited)}

% Whta's he symbol of the Main menu buttin? Logout

\medskip\noindent These sheets introduce you to the Linux/Unix Java programming environment to be used on the module by getting you to compile and run a program. It is also a gentle introduction to Language Processors since you will compile and execute your first intepreter: The Straightline Programming Language interpreter

\medskip\noindent You will be expected to be able to copy and manipulate program files and directories or web locations named in lab sheets, and compile and run the programs,  and then to modify them and compile and run them.
If you are not familiar with the Linux labs you should also get a copy of any
\emph{Computing Services} documentation available.


\subsection*{The Linux Environment}


\subsubsection*{Working with the KDE windowing system under Linux}

Each computer is attached by a network to several file systems. Under Linux, the fact that there are multiple file systems is something you don't normally have to think about. All the available systems just appear as different directories (folders) in a large`tree' of directories. The tree is upside-down with its root at the top. The Root Directory is called ``{\tt /}''. We will use the words `directory' and `folder' to mean the same thing.

The Linux labs use Suse Linux and the KDE windowing system as its main user interface.
You will notice that KDE has a Windows-like \negra{taskbar} (the control panel) at the bottom of the screen with a button with the Suse logo (K Menu) on the bottom-left. As on Windows, clicking on this reveals a menu that launches applications and utilities.

\subsubsection*{Your CSD home directory and the KDE File Manager}

When logged in as a Linux user you have a \emph{home directory}.
This is a place in the file system which belongs to you: the place where you can create, modify and delete files and folders. When you start the file manager (the button labelled with a small house icon on the control panel is the easiest way to start it), your home directory is the one it will display. You can also get the file manager to take you to your home directory at any time simply by clicking on the home icon on the task bar at the top.
Use the file manager to go to your home directory now.
Does it contain any files? Does it contain any hidden files?
(Hint: look on the {\sf View} menu.)


% From the CSD Linux machines your SOI home directory is available as \fname{/soi/homes/}$<${\sc user}$>$,  where $<${\sc user}$>$ is your login-name. 

\subsubsection*{Unix sessions, Terminals, and your directories}

A Unix session is made up of a series of commands typed and executed by the user from the command line at a \emph{Unix terminal} or \emph{Unix shell} window. A Unix shell window can be fired up from the K menu or from one of the icons  on the taskbar: the one with the terminal screen on it, marked with \negra{Konsole}.

Fire up a shell window. The first question you may want to ask is 'Where am I?'. You can answer this question by typing:
\begin{verbatim}
    pwd
\end{verbatim}
The {\tt pwd} command displays the name of the \emph{current directory}, that is, the name of the directory where you are currently located. By default you will always start a Unix session from your home directory. Therefore, the first {\tt pwd} command should display a directory name  starting with '{\tt /'} (the root directory) and ending with your user name. In my case, I got the following:
\begin{quote}
{\tt /u4.bristol/s00/sbbc287}
\end{quote}
Now type:
\begin{quote}
{\tt ls} 
\end{quote}
The {\tt ls} command displays the contents of the current directory -  the previos command shoul've listed the contents of your CSD home directory. You can also display the contents of any directory by passing a directory name as argument to the {\tt ls} command. For example, in order to see the contents of the {\tt KDesktop} directory simply type:
\begin{quote}
{\tt ls KDesktop} 
\end{quote}
Besides arguments, Unix commands can also accept special options listed after a the '-' (minus) symbol. For example, these are valid {\tt ls} options:

\begin{tabular}{lll}
{\tt ls -l} & $\;\;\;$ & Lists permissions, ownership and last update info \\
{\tt ls -a} & & Lists hidden files as well \\
{\tt ls -al KDesktop} & & Combined options
\end{tabular}

You can see a brief explanation of almost all Unix command by using the {\tt man} and {\tt info} commands/ For example, type {\tt man ls} and {\tt info ls}.

\subsubsection*{Creating a directory}

In this section you will learn how to create new directories and move through the directory tree. The command {\tt cd} \fname{dirname} changes the current directory to the directory name specified as argument i.e. \fname{dirname}. 
First, make sure the current directory is your home directory. You can always move to your home directory by typing the following:
\begin{quote}
{\tt cd}
\end{quote}
The {\tt cd} command with no arguments will always get you to your home directory. Now, execute the following series of commands:\\

\begin{tabular}{lll}
{\tt ls} & $\;\;\;$ & Check {\tt KDesktop} is one of the names listed \\
{\tt cd KDesktop} & & The current directory should be now be {\tt KDesktop} \\
{\tt pwd} & & Check your current directory \\
{\tt ls} & & Inspect the contents of {\tt KDesktop} \\
{\tt cd ..} & & Move to the parent directory (one directory up) \\
{\tt pwd} & & Check you are back to your home directory \\
 & &
\end{tabular}

New directories can be created with the {\tt mkdir} command. We would like to create the {\tt LanguageProcessors} directory - you can pick any name you want - in order to store all our lab work. Do the following:

\begin{tabular}{lll}
{\tt mkdir LanguageProcessors} & $\;\;\;$ & Creates new directory {\tt LanguageProcessors} \\
{\tt cd LanguageProcessors} & & You should be in {\tt LanguageProcessors now}
\end{tabular}


\subsection*{Java environment and programming}

The Java environment we will use is Suns JDK (Java Development Kit, now also known as the SDK), which can be considered to be the reference  Java environment, and provides (amongst other things) a compiler, interpreter and debugger. Theseare not integrated into a closed environment, so you need to use at least the Uni file system as above, and a Unix editor to be able to create and modify programs (see below), and learn the compiler and other commands. 

Before we continue, make sure your current directory is {\tt LanguageProcessors}\footnote{Or the directory you have chosen for your Language Processors work}.

\subsubsection*{Compiling Java programs on Unix}

By default, the CSD labs do not have the {\tt java} environment loaded. In order to use Java in a shell window you must add module \verb+java+, which gives access to the Java JDK (also known as SDK) and some local Java libraries:

\begin{quote}
{\tt module add java}
\end{quote}

\textbf{IMPORTANT:} Always load the {\tt java} module when working with the CSD Unix labs. \\

Next, we need to get the source Java files that make up the Straightline interpreter. The files have been packaged into an archive file named {\tt straightline.tar} by the Unix utility program {\tt tar}. Do the following:
\begin{itemize}
\item Download the {\tt straightline.tar} file from the module's CitySpace directory \fname{Week1}\footnote{You may get straightline1.tar due to CitySpace's wickedness} or from the following URL: http://www.soi.city.ac.uk/~sbbc287/straightline.tar.
\item Make sure {\tt straightline.tar} has been copied to your {\tt LanguageProcessors} directory.
\item Unarchive the files with the following command:
\begin{quote}
{\tt tar -xvf straightline.tar}
\end{quote}
This creates the {\tt straightline} directory and copies all related {\tt .java} files into it. 
\item Change to the {\tt straightline} directory ({\tt cd straightline}) and list its contents ({\tt ls}). You should get the following:

\begin{verbatim}
Interpreter.java        ParserTokenManager.java TokenMgrError.java
ParseException.java     SimpleCharStream.java   straightlineAST.java
Parser.java             Table.java
ParserConstants.java    Token.java
\end{verbatim}

The Straightline interpreter (scanner and parser included) is made up of 10 {\tt .java} files. 
\end{itemize}

The Java compilation command is {\tt javac}, which will compile single or multiple {\tt .java} files and generate {\tt .class} (Java bytecode) files. In order to compile the Straightline interpreter execute the following command:

\begin{quote}
{\tt javac *.java}
\end{quote}

which will compile all Java source files in the current directory (remember you must be in the {\tt strightline} directory.
\emph{Your first compilation will take a long time; subsequent ones take much less time.} 

The {\tt javac} command generates a new {\tt class} file per declared class.
Succesful execution of the command above should generate 23 new {\tt .class} files.

\subsubsection*{Running Java programs on Unix}

Java programs are executed with the {\tt java command}:

\begin{quote}
{\tt java } \fname{MainClass}
\end{quote}

where \fname{MainClass} is any class which contains the {\tt public static void main(String[] args*)} method. In our example, the {\tt main} method is part of the {\tt Interpreter} class. You can quicly check this by invoking the {\tt cat Interpreter.java} or {\tt more Interpreter.java} commands - with the latter, press the spacebar in order to see the rest of the file. Thus, the command

\begin{quote}
{\tt java Interpreter}
\end{quote}

will execute the Straightline interpreter.

\subsubsection*{The Straightline Interpreter}

When executed, the Straightline interpreter display a couple of greeting lines, followed by the interpreter's prompt {\tt Enter Program >} as shown below:

\begin{verbatim}
Interpreter of one-line programs.
End input with <Enter>. Terminate interpreter with empty program.
Enter Program > _
\end{verbatim}

Recall that the interpreter implements the Strightline programming language, which syntax is defined by the following grammar:\\

\begin{tabular}{lcl}
Stm & $\rightarrow$ & Stm \verb+;+ Stm \verb+|+ id := Exp \verb+| print(+ ExpList \verb+)+ \\
Exp & $\rightarrow$ & id \verb+|+ num \verb+|+ Exp Binop Exp \verb+|+ \verb+(+ Stm , Exp \verb+)+ \\
ExpList & $\rightarrow$ & Exp , ExpList \verb+|+ Exp \\
Binop & $\rightarrow$ & \verb=+ | - | * | / = \\
\end{tabular} \\

The file {\tt Interpreter.java} contains the entry point to the program: an infinite loop that reads input from the user, parses it and prints out the result. The parser has been implemented using Javacc (to be learned in the following weeks); it performs lexical analysis and creates an instance of the {\tt Stm} class. The file {\tt straightlineAST.java} contains all the classes that implement the programming language's abstract syntax trees and the implementations of interp. Inspect both files and understand the code that implement the interpreter. \\ 

Try the following examples:\\

\begin{tabular}{lcl}
{\tt print 5} & & Parse error - correct it \\
{\tt print(1,1+2,3*5)} & & This should be ok \\
{\tt print(1,1+2), print(3*5+5)} & &  Another parse error. What's wrong? \\
{\tt x = 12; print(10 + x)} & & \\
{\tt x := 12; print(10 * y + x)} & & A semantic analysis should've detected this
 \\
\multicolumn{3}{l}{{\tt x := 5; print(3, (x := x * 10, x+2),500)}  $\;\;\;\;$ try more of these} \\
\end{tabular}\\



\subsubsection*{Logging Out}

\emph{Always remember} to log out when you have finished working at a machine.
To logout from a Linux machine, press the button (K button?) at the left of the control panel at the bottom of the screen, and select {\sf Logout} from the menu. 

If you leave a machine without logging out you are putting your own work
at risk.

\end{document}

