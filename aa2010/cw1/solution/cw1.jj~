
PARSER_BEGIN(cw1)
/* cw1 - Solution */
/* Java declarations to be inserted by JavaCC  */

/* Class declaration for LexInt used instead of default */
public class cw1 {
  public static void main(String args[]) throws ParseException {
    System.out.println ("Type in tokens separated by white space (including newlines)");
    System.out.println ("Type EOF to finish...(Ctrl-D on Unix, Ctrl-Z on PC)");
    cw1 parser = new cw1(System.in);
    parser.TokenList(); /* TokenList declared below */
  }

  public static int parseLiteral(String hex, int base)  {
       int valchar=0, val=0, l;
       char ch; 
       StringBuffer buf = new StringBuffer(hex);
       l = buf.length();	    
       for(int i=0; i < l; i++) {
	ch=buf.charAt(i);		
	if (ch >= '0' && ch <= '9')		    
	   valchar = ch-'0';
	else if (ch >= 'a' && ch <= 'f')		    
	     valchar = 10 + (ch-'a');		
	else if (ch >= 'A' && ch <= 'F')		    
	     valchar = 10 + (ch-'A');
	else {
	     System.out.println("Bad Char "+ch); // better trow an exception
	     return -1;
	}		
	if (valchar >= base) {		   
	     System.out.println("Bad Char "+ch+" greater or equal than base "+base);
	     return -1;
        }	
	val = val*base + valchar;	    
       }	    
      return val;	
  }

}


PARSER_END(cw1)

/* 
 * Lexical items. 
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"		/* Tab */
| "\n"		/* Newline */
| "\r"		/* Return */
| "\f"		/* Formfeed */
}

TOKEN : /* Integers literals */
{
  < INTEGER_LITERAL: ("+"|"-")? <UNSIGNED_INT> >
}

TOKEN : /* Rational literals */
{
  < RATIONAL: <UNSIGNED_INT> "/" <UNSIGNED_INT>  >
}

TOKEN : /* My IDs */
{
  < MYID: "sbbc287" >
|
  < MYID3: "sbbc" ("2")+ "87">
|
  < MYID2: "sbbc" ("sbbc" | "287")* "287" >
}

TOKEN : /* Identifiers. */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
}

TOKEN :
{
 < HORROR: (~[  " ", "\t", "\n", "\r", "\f"])+  >
}


TOKEN : /* Definitions for use in other lexical definitions 
           (signified by the `#'). */
{
  < #LETTER: [ "a"-"z", "A"-"Z" ] >
|
  < #DIGIT: [ "0"-"9"] >
|
  < #UNSIGNED_INT: ("0" | (["1"-"9"] (<DIGIT>)*)) >
}

/*
 * A simple grammar to match tokens and print them.
 */

void TokenList() :
{Token t; int i,val, val2; double f;}
{
   ( { val = 0;}
     (t = <INTEGER_LITERAL> | t = <IDENTIFIER> | t=<HORROR> |
      t = <MYID> | t = <MYID2> | t = <MYID3> | t = <RATIONAL> )
     // Code executed after any match to tokens above
     { System.out.print(tokenImage[t.kind]+" (`"+t.image+"') "); 
       switch(t.kind)  {
         case INTEGER_LITERAL:
	     if (t.image.charAt(0)=='+')
	     	val = cw1.parseLiteral(t.image.substring(1),10);
	     else if (t.image.charAt(0)=='-')
             	val = -cw1.parseLiteral(t.image.substring(1),10);
	     else
	        val = cw1.parseLiteral(t.image,10);
	     System.out.println(" value = "+val); 
	     break;
         case RATIONAL:
	     i = t.image.indexOf('/');
	     val = cw1.parseLiteral(t.image.substring(0,i),10);
	     val2 = cw1.parseLiteral(t.image.substring(i+1),10);
	     System.out.print(" value = ");
	     if (val2==0)
	        System.out.println("infinity");
             else {
                f = (double) val / val2;
	        System.out.println(f);
             }
	     break;
	 default:
	     System.out.println(" "); // new line
       } 
     }
   )* <EOF>
}

