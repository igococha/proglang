
PARSER_BEGIN(cw1)
/* Java declarations to be inserted by JavaCC  */

/* Class declaration for cw1 used instead of default */
public class cw1 {
  public static void main(String args[]) throws ParseException {
    System.out.println ("Type in tokens separated by white space (including newlines)");
    System.out.println ("Type EOF to finish...(Ctrl-D on Unix, Ctrl-Z on PC)");
    cw1 parser = new cw1(System.in);
    parser.TokenList(); /* TokenList declared below */
  }

  public static int parseLiteral(String hex, int base)  {
       int valchar=0, val=0, l;
       char ch; 
       StringBuffer buf = new StringBuffer(hex);
       l = buf.length();	    
       for(int i=0; i < l; i++) {
	ch=buf.charAt(i);		
	if (ch >= '0' && ch <= '9')		    
	   valchar = ch-'0';
	else if (ch >= 'a' && ch <= 'f')		    
	     valchar = 10 + (ch-'a');		
	else if (ch >= 'A' && ch <= 'F')		    
	     valchar = 10 + (ch-'A');
	else {
	     System.out.println("Bad Char "+ch); // better trow an exception
	     return -1;
	}		
	if (valchar >= base) {		   
	     System.out.println("Bad Char "+ch+" greater or equal than base "+base);
	     return -1;
        }	
	val = val*base + valchar;	    
       }	    
      return val;	
  }

}


PARSER_END(cw1)

/* 
 * Lexical items. 
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"		/* Tab */
| "\n"		/* Newline */
| "\r"		/* Return */
| "\f"		/* Formfeed */
}

TOKEN : /* Integers literals */
{
  < INTEGER_LITERAL: "0" | (["1"-"9"] (<DIGIT>)*) >
}

TOKEN : /* Identifiers. */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
}

TOKEN :
{
 < HORROR: (~[  " ", "\t", "\n", "\r", "\f"])+  >
}


TOKEN : /* Definitions for use in other lexical definitions 
           (signified by the `#'). */
{
  < #LETTER: [ "a"-"z", "A"-"Z" ] >
|
  < #DIGIT: [ "0"-"9"] >
}

/*
 * A simple grammar to match tokens and print them.
 */

void TokenList() :
{Token t; int val;}
{
   ( { val = 0;}
     (t = <INTEGER_LITERAL> | t = <IDENTIFIER> | t=<HORROR> )
     // Code executed after any match to tokens above
     { System.out.print(tokenImage[t.kind]+" (`"+t.image+"') "); 
       switch(t.kind)  {
         case INTEGER_LITERAL:
             val = cw1.parseLiteral(t.image,10);
	     System.out.println(" value = "+val); 
	     break;
	 default:
	     System.out.println(" "); // new line
       } 
     }
   )* <EOF>
}

