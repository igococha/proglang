/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;
import java.util.*;
import ast.*;

public class Parser implements ParserConstants {

  static final public Program program() throws ParseException {
  MainFunction m;
    m = mainFunction();
    jj_consume_token(0);
    {if (true) return new Program(m);}
    throw new Error("Missing return statement in function");
  }

  static final public MainFunction mainFunction() throws ParseException {
  List<Stm> sl; Exp e=null; List<String> varDecs;
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(32);
    jj_consume_token(33);
    jj_consume_token(34);
    varDecs = varDeclList();
    sl = stmList();
    jj_consume_token(35);
     {if (true) return new MainFunction(varDecs,sl);}
    throw new Error("Missing return statement in function");
  }

/* Simplest variable declaration of ints - stored as list of ids */
  static final public List<String> varDeclList() throws ParseException {
  Token t; List<String> vdl = new LinkedList<String>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(INTEGER);
      t = jj_consume_token(ID);
      jj_consume_token(36);
                            vdl.add(t.image);
    }
    {if (true) return vdl;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Stm> stmList() throws ParseException {
  Stm s; List<Stm> l = new LinkedList<Stm>();
    label_2:
    while (true) {
      s = stm();
              l.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case REPEAT:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public Stm stm() throws ParseException {
  Token t; Exp e=null; Stm s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      jj_consume_token(37);
      e = exp();
      jj_consume_token(36);
                             {if (true) return new AssignStm(t.image,e);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(32);
      e = exp();
      jj_consume_token(33);
      jj_consume_token(36);
                                 {if (true) return new PrintStm(e);}
      break;
    case IF:
      s = ifstm();
                {if (true) return s;}
      break;
    case WHILE:
      s = whilestm();
                   {if (true) return s;}
      break;
    case REPEAT:
      s = repeatuntilstm();
                        {if (true) return s;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Stm ifstm() throws ParseException {
  Exp e=null; List<Stm> ls1=null,ls2=null; Stm s;
    jj_consume_token(IF);
    jj_consume_token(32);
    e = exp();
    jj_consume_token(33);
    jj_consume_token(THEN);
    ls1 = block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      ls2 = block();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
   {if (true) return new IfStm(e,ls1,ls2);}
    throw new Error("Missing return statement in function");
  }

  static final public Stm repeatuntilstm() throws ParseException {
 List<Stm>body=null;Exp e=null;
    jj_consume_token(REPEAT);
    body = block();
    jj_consume_token(UNTIL);
    jj_consume_token(32);
    e = exp();
    jj_consume_token(33);
  {if (true) return new RepeatUntilStm(body,e);}
    throw new Error("Missing return statement in function");
  }

  static final public Stm whilestm() throws ParseException {
  Exp e=null; List<Stm> ls=null;
    jj_consume_token(WHILE);
    jj_consume_token(32);
    e = exp();
    jj_consume_token(33);
    ls = block();
   {if (true) return new WhileStm(e,ls);}
    throw new Error("Missing return statement in function");
  }

  static final public List<Stm> block() throws ParseException {
  Stm s; List<Stm> l = new LinkedList<Stm>();
    jj_consume_token(34);
    label_3:
    while (true) {
      s = stm();
                  l.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case REPEAT:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(35);
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp exp() throws ParseException {
  Exp e;
    e = sum();
             {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp sum() throws ParseException {
  Exp e,e2=null;
    e = term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        e2 = term();
                           e = new OpExp(e,OpExp.AOp.PLUS,e2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        e2 = term();
                            e = new OpExp(e,OpExp.AOp.MINUS,e2);
        break;
      case AND:
        jj_consume_token(AND);
        e2 = term();
                          e = new BoolExp(e,BoolExp.BOp.AND,e2);
        break;
      case OR:
        jj_consume_token(OR);
        e2 = term();
                         e = new BoolExp(e,BoolExp.BOp.OR,e2);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp term() throws ParseException {
  Exp e,e2=null;
    e = factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIV:
      case GT:
      case GEQ:
      case EQ:
      case MODULO:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        e2 = factor();
                              e = new OpExp(e,OpExp.AOp.TIMES,e2);
        break;
      case DIV:
        jj_consume_token(DIV);
        e2 = factor();
                            e = new OpExp(e,OpExp.AOp.DIV,e2);
        break;
      case GT:
        jj_consume_token(GT);
        e2 = factor();
                           e = new CmpExp(e,CmpExp.COp.GT,e2);
        break;
      case GEQ:
        jj_consume_token(GEQ);
        e2 = factor();
                            e = new CmpExp(e,CmpExp.COp.GEQ,e2);
        break;
      case EQ:
        jj_consume_token(EQ);
        e2 = factor();
                           e = new CmpExp(e,CmpExp.COp.EQ,e2);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        e2 = factor();
                              e= new OpExp(e,OpExp.AOp.MODULO,e2);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp factor() throws ParseException {
  Token token; int x=0; Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTLITERAL:
      token = jj_consume_token(INTLITERAL);
            try {
                x = Integer.parseInt(token.image);
                {if (true) return new IntLiteralExp(x);}
            } catch (NumberFormatException ee) {
                {if (true) return new IntLiteralExp(x);}
            }
      break;
    case ID:
      token = jj_consume_token(ID);
                   {if (true) return new IdExp(token.image);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
               {if (true) return new BoolLiteralExp(true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                {if (true) return new BoolLiteralExp(false);}
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(32);
      e = exp();
      jj_consume_token(33);
                              {if (true) return new NotExp(e);}
      break;
    case 32:
      jj_consume_token(32);
      e = exp();
      jj_consume_token(33);
                        {if (true) return e;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2000000,0x24380000,0x24380000,0x1000000,0x24380000,0x60600,0x60600,0x800f800,0x800f800,0x30010180,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,};
   }

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[38];
    for (int i = 0; i < 38; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

 }
